name: 'Gemini PR Review'

on:
  pull_request:
    types: ['opened', 'synchronize', 'reopened']
  pull_request_review_comment:
    types: ['created']
  issue_comment:
    types: ['created']

jobs:
  review:
    if: |
      (github.event_name == 'pull_request') ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@gemini-cli /review')) ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '@gemini-cli /review'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for proper diff analysis

      - name: Run Gemini PR Review
        uses: google-github-actions/run-gemini-cli@v0
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          settings: |
            {
              "coreTools": [
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(gh pr comment)",
                "run_shell_command(gh pr review)",
                "run_shell_command(git log)",
                "run_shell_command(git diff)"
              ],
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": ["run", "-i", "--rm", "ghcr.io/github/github-mcp-server"],
                  "env": {
                    "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                  }
                }
              },
              "maxSessionTurns": 30
            }
          prompt: |
            You are an expert code reviewer for the pAI (Personal AI) repository. This repository contains AI agents built with the FastAgent framework that automate personal and professional workflows.

            ## Repository Context & Standards
            - **Architecture**: FastAgent framework with Docker-based agents
            - **Structure**: 
              - `Agentfile`: Agent configuration with Docker syntax
              - `Taskfile.yml`: Task definitions for development/deployment  
              - `@Home/` and `@Work/`: Context-specific agent directories
              - `ME.md`: Personal context files for agent behavior
            - **Technologies**: Python, Docker, FastAgent, GitHub Actions, MCP Protocol
            - **Models**: Currently uses GPT-4.1, expanding to include Gemini

            ## Code Review Focus Areas

            ### 🔴 **Critical (Must Fix)**
            - **Security**: Exposed API keys, credentials, or sensitive data
            - **Docker Security**: Unsafe container configurations or exposed ports
            - **MCP Configuration**: Insecure server configurations or authentication
            - **Breaking Changes**: Changes that break existing agent functionality

            ### 🟠 **High Priority (Should Fix)**
            - **FastAgent Patterns**: Deviations from established agent patterns
            - **Error Handling**: Missing error handling in agent code
            - **Resource Management**: Memory leaks, unclosed connections
            - **Configuration Issues**: Missing or incorrect agent configurations

            ### 🟡 **Medium Priority (Consider)**
            - **Code Quality**: Maintainability, readability improvements
            - **Performance**: Optimization opportunities
            - **Documentation**: Missing docstrings, unclear comments
            - **Testing**: Missing test coverage for new features

            ### 🟢 **Low Priority (Nice to Have)**
            - **Style**: Code formatting, naming conventions
            - **Refactoring**: Code organization improvements
            - **Dependencies**: Outdated or unnecessary dependencies

            ## Review Process
            1. **Analyze the PR diff** to understand all changes
            2. **Identify the type of changes**: New agent, workflow update, infrastructure change
            3. **Check for security issues** especially around credentials and MCP configurations
            4. **Verify FastAgent patterns** are followed correctly
            5. **Review agent configurations** in Agentfile and fastagent.config.yaml
            6. **Assess impact** on existing agents and workflows
            7. **Provide specific, actionable feedback** with code suggestions where helpful

            ## Output Format
            Structure your review with:
            - **Summary**: Brief overview of the changes and overall assessment
            - **Security Review**: Any security concerns (prioritize these)
            - **Architecture Review**: Alignment with pAI patterns and FastAgent conventions
            - **Code Quality**: Specific improvements with line-by-line suggestions
            - **Recommendations**: Action items for the author

            Focus on providing constructive, specific feedback that helps maintain the quality and security of the pAI agent system. Use severity indicators (🔴🟠🟡🟢) to help prioritize feedback.