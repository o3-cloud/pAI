import asyncio
from mcp_agent.core.fastagent import FastAgent
from mcp_agent.core.request_params import RequestParams

# Create the application
fast = FastAgent("Generated by Agentman")

@fast.agent(
    name="url_analyzer",
    instruction="""Given a URL, provide a comprehensive summary of the content""",
    servers=["fetch"],
    model="gpt-4.1-mini"
)
@fast.agent(
    name="research_evaluator",
    instruction="""Evaluate the research quality and relevance of the extracted information.
Suggest a new url to search if possible. 
- Provide a rating (EXCELLENT, GOOD, FAIR, or POOR).
- Offer specific feedback or suggestions for improvement.
""",
    model="gpt-4.1-mini"
)
@fast.agent(
    name="extract_questions",
    instruction="""Extract questions""",
    model="gpt-4.1-mini",
    request_params=RequestParams(response_format={'type': 'json_schema', 'json_schema': {'name': 'FollowUpQuestionList', 'schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'FollowUpQuestionList', 'type': 'object', 'description': 'A list of follow-up questions extracted from a text.', 'properties': {'follow_up_questions': {'type': 'array', 'items': {'type': 'string', 'description': 'A single follow-up question.'}}}, 'required': ['follow_up_questions']}}})
)
@fast.agent(
    name="extract_facts",
    instruction="""Extract facts""",
    model="gpt-4.1-mini",
    request_params=RequestParams(response_format={'type': 'json_schema', 'json_schema': {'name': 'FactList', 'schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'FactList', 'type': 'object', 'description': 'A list of factual statements and their sources.', 'properties': {'facts': {'type': 'array', 'items': {'type': 'object', 'properties': {'fact': {'type': 'string', 'description': 'A statement of fact.'}, 'source': {'type': 'string', 'description': 'The source or reference for the fact.'}}, 'required': ['fact']}}}, 'required': ['facts']}}})
)
@fast.agent(
    name="extract_missing_info",
    instruction="""Extract missing info""",
    model="gpt-4.1-mini",
    request_params=RequestParams(response_format={'type': 'json_schema', 'json_schema': {'name': 'MissingInformation', 'schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'MissingInformation', 'type': 'object', 'description': 'A list of missing or required information extracted from a text.', 'properties': {'missing_information': {'type': 'array', 'items': {'type': 'string', 'description': 'A description of a piece of information that is missing or required.'}}}, 'required': ['missing_information']}}})
)
@fast.agent(
    name="extract_tags",
    instruction="""Extract missing info""",
    model="gpt-4.1-mini",
    request_params=RequestParams(response_format={'type': 'json_schema', 'json_schema': {'name': 'ExtractedTags', 'schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'ExtractedTags', 'type': 'object', 'description': 'A list of tags or keywords extracted from a text.', 'properties': {'tags': {'type': 'array', 'items': {'type': 'string', 'description': 'A tag or keyword extracted from the text.'}}}, 'required': ['tags']}}})
)
@fast.agent(
    name="extract_summary",
    instruction="""Extract summary""",
    model="gpt-4.1-mini",
    request_params=RequestParams(response_format={'type': 'json_schema', 'json_schema': {'name': 'Summary', 'schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'Summary', 'type': 'object', 'description': 'A summary of the content extracted from a text.', 'properties': {'summary': {'type': 'string', 'description': 'A brief summary of the given content.'}}, 'required': ['summary']}}})
)
@fast.agent(
    name="extract_suggestions",
    instruction="""Extract suggestions""",
    model="gpt-4.1-mini",
    request_params=RequestParams(response_format={'type': 'json_schema', 'json_schema': {'name': 'ImprovementSuggestions', 'schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'ImprovementSuggestions', 'type': 'object', 'description': 'A list of suggestions for improvements or recommendations extracted from a text.', 'properties': {'suggestions': {'type': 'array', 'items': {'type': 'string', 'description': 'A suggested improvement or recommendation.'}}}, 'required': ['suggestions']}}})
)
@fast.agent(
    name="extract_graph",
    instruction="""Extract a knowledge graph of key concepts""",
    model="gpt-4.1-mini",
    request_params=RequestParams(response_format={'type': 'json_schema', 'json_schema': {'name': 'SimpleGraphAssociation', 'schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'SimpleGraphAssociation', 'description': 'A simple graph structure. Only include nodes and edges explicitly provided in the source data. Do not infer, hallucinate, or fabricate any information.', 'type': 'object', 'properties': {'nodes': {'type': 'array', 'description': 'A list of node identifiers. Only include nodes that are explicitly present in the source data. Do not invent or infer nodes.', 'items': {'type': 'string'}}, 'edges': {'type': 'array', 'description': 'A list of edges connecting nodes. Only include edges that are explicitly present in the source data. Do not invent or infer relationships.', 'items': {'type': 'object', 'properties': {'source': {'type': 'string', 'description': "The source node identifier. Must match a node in the 'nodes' array. Do not invent or infer sources."}, 'target': {'type': 'string', 'description': "The target node identifier. Must match a node in the 'nodes' array. Do not invent or infer targets."}, 'relationship': {'type': 'string', 'description': 'Defines the relationship between the source and target nodes. Only include relationships explicitly stated in the source data. Do not hallucinate or fabricate relationships.'}}, 'required': ['source', 'target']}}}, 'required': ['nodes', 'edges']}}})
)
@fast.agent(
    name="extract_risks",
    instruction="""Extract risks""",
    model="gpt-4.1-mini",
    request_params=RequestParams(response_format={'type': 'json_schema', 'json_schema': {'name': 'Risks', 'schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'Risks', 'type': 'object', 'description': 'A list of potential risks or concerns extracted from a text.', 'properties': {'risks': {'type': 'array', 'items': {'type': 'string', 'description': 'A potential risk or concern.'}}}, 'required': ['risks']}}})
)
@fast.agent(
    name="extract_links",
    instruction="""You are a helpful agent.""",
    model="gpt-4.1-mini",
    request_params=RequestParams(response_format={'type': 'json_schema', 'json_schema': {'name': 'Links', 'schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'Links', 'type': 'object', 'properties': {'references': {'type': 'array', 'description': 'A list of reference objects containing titles and URLs. Do not include hallucinated or made-up references; ensure all references are accurate and verifiable.', 'items': {'type': 'object', 'description': 'A reference with a title and a URL. Avoid hallucination and misinformation; only provide real, factual references.', 'properties': {'title': {'type': 'string', 'description': 'The title or name of the reference. Do not invent or hallucinate titles; use only accurate information.'}, 'url': {'type': 'string', 'format': 'uri', 'description': 'The URL pointing to the reference resource. Ensure the URL is real and not fabricated; avoid misinformation.'}}, 'required': ['title', 'url']}}}}}})
)
@fast.agent(
    name="extract_action_items",
    instruction="""You are a helpful agent.""",
    model="gpt-4.1-mini",
    request_params=RequestParams(response_format={'type': 'json_schema', 'json_schema': {'name': 'ActionItemList', 'schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'ActionItemList', 'type': 'object', 'description': 'A list of action items extracted from a text.', 'properties': {'action_items': {'type': 'array', 'items': {'type': 'string', 'description': 'A single action item extracted from the text.'}}}, 'required': ['action_items']}}})
)
@fast.agent(
    name="reporter",
    instruction="""- Combind the json data todgether into a report.
- Format report as markdown.
- Visualize knowledge using mermaidjs
- Save the report to /workspace/reports.md
""",
    servers=["filesystem"],
    model="gpt-4.1"
)
@fast.chain(
    name="default",
    sequence=["researcher", "extractors"]
)
@fast.parallel(
    name="extractors",
    fan_out=["extract_questions", "extract_facts", "extract_summary", "extract_tags", "extract_missing_info", "extract_suggestions", "extract_risks", "extract_links", "extract_graph", "extract_action_items"],
    fan_in="reporter",
    include_request=False
)
@fast.evaluator_optimizer(
    name="researcher",
    generator="url_analyzer",
    evaluator="research_evaluator",
    min_rating="EXCELLENT"
)
async def main() -> None:
    async with fast.run() as agent:
        # Check if prompt.txt exists and load its content
        import os
        prompt_file = 'prompt.txt'
        if os.path.exists(prompt_file):
            with open(prompt_file, 'r', encoding='utf-8') as f:
                prompt_content = f.read().strip()
            if prompt_content:
                await agent(prompt_content)
            else:
                await agent()
        else:
            await agent()


if __name__ == "__main__":
    asyncio.run(main())